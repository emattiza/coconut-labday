#!/usr/bin/env nix-shell
#!nix-shell -i coconut-run ./shell.nix
import responses
import json
import glom
from pprint import pprint

def factorial(0) = 1

addpattern def factorial(n is int if n > 0) =
    """Compute n! where n is an integer >= 0."""
    range(1, n+1) |> reduce$(*)


def test_factorial():
	0 |> factorial |> assertEq(1)
	3 |> factorial |> assertEq(6)

@responses.activate
def test_request():
	import requests 
	output = """
	{
		"slideshow": {
			"author": "Yours Truly",
			"date": "date of publication",
			"slides": [
				{
					"title": "Wake up to WonderWidgets!",
					"type": "all"
				},
				{
					"items": [
					"Why <em>WonderWidgets</em> are great",
					"Who <em>buys</em> WonderWidgets"
					],
					"title": "Overview",
					"type": "all"
				}
			],
			"title": "Sample Slide Show"
		}
	}
	"""
	# mock response
	responses.add(responses.GET, 'https://httpbingo.org/json', status=200, json=json.loads(output))

	# how to get raw text from endpoint
	raw_text = "https://httpbingo.org/json" |> requests.get |> .text

	# assert mock and raw text equivalent
	assertJSONEq(output)(raw_text)
	# make sure mock was hit instead of real endpoint
	assert len(responses.calls) == 1

	# nested traversal
	raw_text |> json.loads |?> .get('slideshow') |?> .get('title') |> assertEq("Sample Slide Show")
	# nested fail traversal
	raw_text |> json.loads |?> .get('slidesho') |?> .get('title') |> assertEq(None)

	# equivalent glom
	slide_title_get = t -> glom.glom(t,'slideshow.title', default=None)
	raw_text |> json.loads |?> slide_title_get |> assertEq("Sample Slide Show")

	bad_slide_title_get = t -> glom.glom(t,'slideshow.titl', default=None)
	raw_text |> json.loads |?> bad_slide_title_get |> assertEq(None)

	# failing coconut traversal
	raw_text |> json.loads |?> .get('title') |> assertEq(None)



def assertEq(x):
	def test(y):
		assert x == y
	return test

def assertJSONEq(x):
	def test(y):
		assert json.loads(y) == json.loads(x)
	return test
